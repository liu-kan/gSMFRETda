name: GPU_Linux_CI

on:
  workflow_dispatch:
    inputs:
      ref_sha:
        description: 'SHA of ref'
        required: false
      trigger_run_id:
        description: 'Workflow job id that triggered this Job'
        required: false
      gpu_checksid:
        description: 'GPU checks id that inited in cpu workflow'
        required: false        

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_gputest:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: [self-hosted, Linux, gpu, X64]
    # runs-on: ubuntu-latest

    env:
      CUDA_HOME: "/usr/local/cuda"

    steps:
      - name: get check detail url
        run: |
          curl "https://api.github.com/repos/liu-kan/gSMFRETda/actions/runs/$GITHUB_RUN_ID/jobs"|python3 -c "import sys, json, os; os.system('echo d_url='+json.load(sys.stdin)['jobs'][0]['html_url']+' >> $GITHUB_ENV')"

      - uses: LouisBrunner/checks-action@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{  github.event.inputs.gpu_checksid}}
          status: in_progress
          details_url: ${{ env.d_url }}

      - name: Set CUDA ENV
        run: |
          echo "$CUDA_HOME/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64" >> $GITHUB_ENV

      - name: show env
        shell: bash
        run: |
          echo $PATH
          echo $LD_LIBRARY_PATH
          echo ${{ env.d_url }}

      - name: deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libhdf5-dev pkg-config protobuf-compiler libprotobuf-dev libnng-dev libboost-dev doxygen libboost-system-dev libboost-serialization-dev cmake gengetopt libboost-filesystem-dev libdlib-dev libgtest-dev libblas-dev liblapack-dev libsqlite3-dev libpng-dev libgsl-dev
      
      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: cuda
        run: |
          sudo apt-get install -y software-properties-common curl
          curl -O https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
          sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
          sudo apt-get update
          sudo apt-get install -y cuda-nvprof-11-4  nvidia-headless-470 cuda-cudart-dev-11-4 cuda-minimal-build-11-4 cuda-nvrtc-dev-11-4 libcurand-dev-11-4

      - name: configure_cmake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j 1

      - name: gpu_test
        id: gpu_test
        continue-on-error: true
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{env.BUILD_TYPE}} --output-on-failure -R gen_rand_tests -O output.txt

      - name: tail long output
        if: ${{ steps.gpu_test.outcome == 'failure' }}
        run: |
          cp build/output.txt build/outputLong.txt
          tail -c 4096 build/outputLong.txt > build/output.txt

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gpu_test_output
          path: ${{github.workspace}}/build/*.txt

      - uses: LouisBrunner/checks-action@v1.2.0
        if: ${{ steps.gpu_test.outcome == 'skipped' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}          
          check_id: ${{  github.event.inputs.gpu_checksid}}
          conclusion: "failure"
          details_url: ${{ env.d_url }}
          output: |
            {"summary":"${{ steps.gpu_test.outcome }}"}
          output_text_description_file: ${{github.workspace}}/build/output.txt

      - uses: LouisBrunner/checks-action@v1.2.0
        if: ${{ steps.gpu_test.outcome != 'skipped' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}          
          check_id: ${{  github.event.inputs.gpu_checksid}}
          conclusion: ${{ steps.gpu_test.outcome }}
          details_url: ${{ env.d_url }}
          output: |
            {"summary":"${{ steps.gpu_test.outcome }}"}
          output_text_description_file: ${{github.workspace}}/build/output.txt
  
  job_exit:
    if: always()
    needs: build_gputest
    runs-on: ubuntu-latest
    steps:
      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Send the Notification to end GPU Node HEAD
        if: ${{ (! github.event.inputs.ref_sha) && github.event.inputs.trigger_run_id}} 
        env:
          BASE_URL: ${{ secrets.WORKFLOWNOTIFICATION_BASE }} 
          SIG_KEY: ${{ secrets.WORKFLOWNOTIFICATION_SIGKEY }} 
        run: |
          python -m pip install --upgrade pip
          pip install httpx
          pip install pydantic
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python scripts/workFlowCtrl.py  -s "$GITHUB_SHA" -u "$BASE_URL" -e gputest_end -k "$SIG_KEY" -n "$GITHUB_WORKFLOW" -r "$GITHUB_REF" --repo "$GITHUB_REPOSITORY" -t "${{github.event.inputs.trigger_run_id}}" > output.txt
          echo "::set-output name=Workflow_End_With_SHA::$(cat output.txt)"

      - name: Send the Notification to end GPU Node SHA
        if: ${{ github.event.inputs.ref_sha && github.event.inputs.trigger_run_id}}
        env:
          BASE_URL: ${{ secrets.WORKFLOWNOTIFICATION_BASE }} 
          SIG_KEY: ${{ secrets.WORKFLOWNOTIFICATION_SIGKEY }} 
        run: |
          python -m pip install --upgrade pip
          pip install httpx
          pip install pydantic
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python scripts/workFlowCtrl.py -u "$BASE_URL" -e gputest_end -k "$SIG_KEY" -n "$GITHUB_WORKFLOW" -s "${{github.event.inputs.ref_sha}}" -r "$GITHUB_REF" --repo "$GITHUB_REPOSITORY" -t "${{github.event.inputs.trigger_run_id}}" > output.txt
          echo "::set-output name=Workflow_End_With_SHA::$(cat output.txt)"
