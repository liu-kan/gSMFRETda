name: ci_build

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'    
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      ref_sha:
        description: 'SHA of ref'
        required: false
      update_cache:
        description: 'update cache'
        required: false        

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CUDA_VERSION: 11.2.2
  cuda_version_major_minor: 11.2

jobs:

  cuda:
    runs-on: windows-2019
    steps:
      - name: Find Cache cuda packages
        id: cache_hits
        if: ${{ (! github.event.inputs.update_cache)}}
        uses: actions/cache@v2
        continue-on-error: true
        env:
          cache-name: cache-cuda-installer-${{env.CUDA_VERSION}}
        with:
          path: |
            C:\hostedtoolcache\windows\cuda_installer-windows\${{env.CUDA_VERSION}}\x64\cuda_installer_${{env.CUDA_VERSION}}.exe
          key: ${{ runner.os }}-file-${{ env.cache-name }}

      - name: cuda-toolkit
        uses: Jimver/cuda-toolkit@v0.2.4
        if: ${{( ! steps.cache_hits.outputs.cache-hit ) || github.event.inputs.update_cache}}
        id: cuda-toolkit
        with:
          cuda: '${{env.CUDA_VERSION}}'

      - name: Cache cuda packages
        id: cache_save
        uses: actions/cache@v2
        if: ${{ (! steps.cache_hits.outputs.cache-hit) || github.event.inputs.update_cache}}
        env:
          cache-name: cache-cuda-installer-${{env.CUDA_VERSION}}
        with:
          path: |
            C:\hostedtoolcache\windows\cuda_installer-windows\${{env.CUDA_VERSION}}\x64\cuda_installer_${{env.CUDA_VERSION}}.exe
          key: ${{ runner.os }}-file-${{ env.cache-name }}

      - name: dir file
        if: ${{ steps.cache_save.outputs.cache-hit }}
        run: dir C:\hostedtoolcache\windows\cuda_installer-windows\${{env.CUDA_VERSION}}\x64\cuda_installer_${{env.CUDA_VERSION}}.exe


  conan_windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    
    steps:
      - name: Find Cache conan
        if: ${{ (! github.event.inputs.update_cache)}}
        id: cache_hits_conan
        uses: actions/cache@v2
        continue-on-error: true
        env:
          cache-name: cache-cuda-installer-${{env.CUDA_VERSION}}
        with:
          path: |
            c:/conan_p
            c:/conan_s
            c:/conan_c
          key: ${{ runner.os }}-file-conan

      - name: install conan 
        if: ${{(! steps.cache_hits_conan.outputs.cache-hit) || github.event.inputs.update_cache}}
        run: |
          pip install conan
          conan config set general.retry=4
          conan config set general.retry_wait=9
          conan config set storage.path=c:/conan_p
          conan config set general.user_home_short=c:/conan_s
          conan config set storage.download_cache=c:/conan_c          

      - name: checkout head      
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: conan install
        if: ${{(! steps.cache_hits_conan.outputs.cache-hit)|| github.event.inputs.update_cache}}
        run: conan install . --profile conan_release_profile.txt --build=missing -if build

      - name: Cache conan packages
        if: ${{(! steps.cache_hits_conan.outputs.cache-hit)|| github.event.inputs.update_cache}}
        id: conan_save
        uses: actions/cache@v2        
        env:
          cache-name: cache-conan
        with:
          path: |
            c:/conan_p
            c:/conan_s
            c:/conan_c
          key: ${{ runner.os }}-file-conan

  build_windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    
    steps:
      - name: Sleep for 20 min
        run: Start-Sleep -s 1200
        shell: powershell
        if: ${{  github.event.inputs.update_cache }}

      - name: Find Cache conan
        id: cache_hits_conan
        uses: actions/cache@v2
        continue-on-error: true
        env:
          cache-name: cache-cuda-installer-${{env.CUDA_VERSION}}
        with:
          path: |
            c:/conan_p
            c:/conan_s
            c:/conan_c
          key: ${{ runner.os }}-file-conan

      - name: install conan
        run: |
          pip install conan
          conan config set general.retry=4
          conan config set general.retry_wait=9
          conan config set storage.path=c:/conan_p
          conan config set general.user_home_short=c:/conan_s
          conan config set storage.download_cache=c:/conan_c          

      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: conan install
        run: conan install . --profile conan_release_profile.txt --build=missing -if build

      - name: Find Cache cuda packages
        id: cache_hits
        uses: actions/cache@v2
        continue-on-error: true
        env:
          cache-name: cache-cuda-installer-${{env.CUDA_VERSION}}
        with:
          path: |
            C:\hostedtoolcache\windows\cuda_installer-windows\${{env.CUDA_VERSION}}\x64\cuda_installer_${{env.CUDA_VERSION}}.exe
          key: ${{ runner.os }}-file-${{ env.cache-name }}

      - uses: Jimver/cuda-toolkit@v0.2.4
        id: cuda-toolkit
        if: ${{! steps.cache_hits.outputs.cache-hit}}
        with:
          cuda: '${{env.CUDA_VERSION}}'

      - name: cuda install
        if: ${{ steps.cache_hits.outputs.cache-hit}}
        shell: cmd
        run: |
          start /wait "" C:\hostedtoolcache\windows\cuda_installer-windows\${{env.CUDA_VERSION}}\x64\cuda_installer_${{env.CUDA_VERSION}}.exe -s
          set CUDA_PATH=C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v%cuda_version_major_minor%
      
      # - name: cuda install choco
      #   run: |
      #     choco install cuda -y
      #     $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
      #     Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
      #     refreshenv

      - uses: msys2/setup-msys2@v2
        with:
          release: false
          msystem: MSYS
          install: gengetopt

      - name: configure_cmake
        run: |
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON -G "Visual Studio 16" -T host=x64 -Dproto=ON

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j -- /p:CharacterSet=Unicode

      - name: cpu_test
        id: cpu-test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -R paraMatCheck_tests -O output.txt

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windowsBuild
          path: bin/*
        
