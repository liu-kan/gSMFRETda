name: ci_win

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'    
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      ref_sha:
        description: 'SHA of ref'
        required: false  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  winbuild:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    # env:
      # CUDA_HOME: "/usr/local/cuda"
    
    steps:
      - uses: Jimver/cuda-toolkit@v0.2.4
        id: cuda-toolkit
        with:
          cuda: '11.2.2'
    
      - name: conan
        run: pip install conan

      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: conan install
        run: conan install . --profile conan_release_profile.txt --build=missing

      - name: configure_cmake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON -G "Visual Studio 16" -T host=x64 -Dproto=ON

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j -- /p:CharacterSet=Unicode

      - name: cpu_test
        id: cpu-test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -R paraMatCheck_tests -O output.txt

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cpu_test_win
          path: output.txt
        
