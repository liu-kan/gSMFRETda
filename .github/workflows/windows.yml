name: Windows_CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'    
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      ref_sha:
        description: 'SHA of ref'
        required: false
      update_cache:
        description: 'update cache'
        required: false        
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: false
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  CUDA_VERSION: 11.2.2
  cuda_version_major_minor: 11.2

jobs:

  build_cputest:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019
    
    steps:

      - name: install conan
        run: |
          pip install conan
          conan config set general.retry=4
          conan config set general.retry_wait=9
          conan config set storage.path=c:/conan_p
          conan config set general.user_home_short=c:/conan_s
          conan config set storage.download_cache=c:/conan_c          

      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: conan install
        run: |
          conan install . --profile conan_release_profile.txt --build=missing -if build 

      - name: Load Cache VCPKG
        id: cache_hits_vcpkg
        uses: actions/cache@v2
        continue-on-error: true
        if: ${{! github.event.inputs.update_cache}}
        env:
          cache-name: cache-vcpkg
        with:
          path: |
            C:/vcpkg
            !C:/vcpkg/buildtrees
            !C:/vcpkg/.git
          key: ${{ runner.os }}−${{ env.cache-name }}-${{github.sha}}-${{ github.event.inputs.ref_sha}}
          restore-keys: |
            ${{ runner.os }}−${{ env.cache-name }}-${{github.sha}}-
            ${{ runner.os }}−${{ env.cache-name }}-

      - name: vcpkg
        if: ${{(! steps.cache_hits_vcpkg.outputs.cache-hit) || github.event.inputs.update_cache}}
        run: vcpkg install --triplet x64-windows "@.vcpkg_deps.txt"

      - uses: Jimver/cuda-toolkit@v0.2.4
        id: cuda-toolkit
        with:
          cuda: '${{env.CUDA_VERSION}}'

      - uses: msys2/setup-msys2@v2
        with:
          release: false
          msystem: MSYS
          install: gengetopt

      - name: configure_cmake
        run: |
          C:\msys64\usr\bin\gengetopt -i 3rdparty/gengetopt/cmdline.ggo --file-name=src/3rdparty/gengetopt/cmdline
          C:\msys64\usr\bin\gengetopt -i 3rdparty/gengetopt/call_gSMFRETda.ggo --file-name=src/3rdparty/gengetopt/call_gSMFRETda
          $env:ChocolateyInstall = Convert-Path "$((Get-Command choco).Path)\..\.."
          Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
          refreshenv
          cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DBUILD_TESTS=ON -G "Visual Studio 16" -T host=x64,version=14.25 -Dproto=OFF

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j -- /p:CharacterSet=Unicode

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 50
        if: ${{ failure() }}
        with:
          limit-access-to-actor: true

      - name: cpu_test
        id: cpu-test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -R paraMatCheck_tests -O output.txt

      - name: Save Cache VCPKG
        id: cache_save_vcpkg
        uses: actions/cache@v2
        continue-on-error: true
        if: ${{(! steps.cache_hits_vcpkg.outputs.cache-hit) || github.event.inputs.update_cache}}
        env:
          cache-name: cache-vcpkg
        with:
          path: |
            C:/vcpkg
            !C:/vcpkg/buildtrees
            !C:/vcpkg/.git
          key: ${{ runner.os }}−${{ env.cache-name }}-${{github.sha}}-${{ github.event.inputs.ref_sha}}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windowsBuild
          path: ${{github.workspace}}/build/bin
        
