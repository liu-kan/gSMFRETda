name: Linux_CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'    
  pull_request:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - 'resources/**'
      - 'scripts/**'
      - '**.md'
  workflow_dispatch:
    inputs:
      ref_sha:
        description: 'SHA of ref'
        required: false  

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build_cputest:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      CUDA_HOME: "/usr/local/cuda"
    
    steps:
      - uses: LouisBrunner/checks-action@v1.2.0
        id: init_gputest_check
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: GPU_Build_Test_Linux
          status: queued

      - name: cuda
        run: |
          sudo apt-get install -y software-properties-common curl
          curl -O https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
          sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
          sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
          sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
          sudo apt-get update
          sudo apt-get install -y cuda-nvprof-11-4 cuda-cudart-dev-11-4 cuda-minimal-build-11-4 cuda-nvrtc-dev-11-4 libcurand-dev-11-4
      - name: Set ENV
        run: |
          echo "$CUDA_HOME/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$CUDA_HOME/lib64:$CUDA_HOME/extras/CUPTI/lib64" >> $GITHUB_ENV

      - name: deps
        run: sudo apt-get install -y build-essential libhdf5-dev pkg-config protobuf-compiler libprotobuf-dev libnng-dev libboost-dev doxygen libboost-system-dev libboost-serialization-dev cmake gengetopt libboost-filesystem-dev libdlib-dev libgtest-dev libblas-dev liblapack-dev libsqlite3-dev libpng-dev libgsl-dev

      - name: checkout head
        if: ${{ ! github.event.inputs.ref_sha}}
        uses: actions/checkout@v2

      - name: checkout with sha
        if: ${{ github.event.inputs.ref_sha}}
        uses: actions/checkout@v2
        with:
          ref: '${{github.event.inputs.ref_sha}}'

      - name: configure_cmake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTS=ON

      - name: cancel gpu check
        uses: LouisBrunner/checks-action@v1.2.0
        if: ${{ failure() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init_gputest_check.outputs.check_id }}
          status: completed
          conclusion: cancelled

      - name: build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: cancel gpu check
        uses: LouisBrunner/checks-action@v1.2.0
        if: ${{ failure() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init_gputest_check.outputs.check_id }}
          status: completed
          conclusion: cancelled

      - name: cpu_test
        id: cpu-test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}} -R paraMatCheck_tests

      - name: cancel gpu check
        uses: LouisBrunner/checks-action@v1.2.0
        if: ${{ failure() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          check_id: ${{ steps.init_gputest_check.outputs.check_id }}
          status: completed
          conclusion: cancelled

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      
      - name: Send the Notification to start GPU Node HEAD
        if: ${{ ! github.event.inputs.ref_sha}}
        env:
          BASE_URL: ${{ secrets.WORKFLOWNOTIFICATION_BASE }} 
          SIG_KEY: ${{ secrets.WORKFLOWNOTIFICATION_SIGKEY }} 
        run: |
          python -m pip install --upgrade pip
          pip install httpx
          pip install pydantic
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          echo "$GITHUB_SHA"
          python scripts/workFlowCtrl.py -i "${{ steps.init_gputest_check.outputs.check_id }}" -s "$GITHUB_SHA" -u "$BASE_URL" -e cputest_pass -k "$SIG_KEY" -n "$GITHUB_WORKFLOW" -r "$GITHUB_REF" --repo "$GITHUB_REPOSITORY" -c "${{steps.cpu-test.conclusion}}" -o "${{steps.cpu-test.outputs}}" -t "${{github.run_id}}" > output.txt
          echo "::set-output name=Workflow_End_With_SHA::$(cat output.txt)"

      - name: Send the Notification to start GPU Node SHA
        if: ${{ github.event.inputs.ref_sha}}
        env:
          BASE_URL: ${{ secrets.WORKFLOWNOTIFICATION_BASE }} 
          SIG_KEY: ${{ secrets.WORKFLOWNOTIFICATION_SIGKEY }} 
        run: |
          python -m pip install --upgrade pip
          pip install httpx
          pip install pydantic
          # if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          python scripts/workFlowCtrl.py -i "${{ steps.init_gputest_check.outputs.check_id }}" -s "${{github.event.inputs.ref_sha}}" -u "$BASE_URL" -e cputest_pass -k "$SIG_KEY" -n "$GITHUB_WORKFLOW" -r "$GITHUB_REF" --repo "$GITHUB_REPOSITORY" -c "${{steps.cpu-test.conclusion}}" -o "${{steps.cpu-test.outputs}}" -t "${{github.run_id}}"> output.txt
          echo "::set-output name=Workflow_End_With_SHA::$(cat output.txt)"


      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: cpu_test
          path: output.txt
        
